VIEWS:
from django.shortcuts import render
from django.db import connection
from django.http import JsonResponse
from .models import CodigoPostal

# Vista para la página de inicio y búsqueda principal
def index(request):
    # Obtener la lista de estados
    estados = CodigoPostal.objects.values_list('d_estado', flat=True).distinct()
    results = None  # Inicializa los resultados como None
    if request.method == 'POST':
        
        # Si se realiza una solicitud POST, obtener el estado, municipio y asentamiento
        estado = request.POST.get('nombre_estado')
        municipio = request.POST.get('nombre_municipio')
        asentamiento = request.POST.get('nombre_asentamiento')
        
        # Ejecutar el procedimiento almacenado para buscar por estado, municipio y asentamiento
        results = execute_stored_procedure('buscar_por_estado_municipio_asentamiento', estado, municipio, asentamiento)
    print(results)
    
    # Renderizar la plantilla con la lista de estados y los resultados de la búsqueda
    return render(request, 'index.html', {'estados': estados, 'results': results})

# Función para ejecutar procedimientos almacenados en la base de datos
def execute_stored_procedure(procedure_name, *args):
    with connection.cursor() as cursor:
        cursor.callproc(procedure_name, args)
        results = cursor.fetchall()
    return results

# Vista para buscar por código postal
def buscar_por_codigo_postal(request):
    if request.method == 'POST':
        
        # Si se realiza una solicitud POST, obtener el código postal
        codigo_postal = request.POST.get('codigo_postal')
        
        # Ejecutar el procedimiento almacenado para buscar por código postal
        results = execute_stored_procedure('buscar_por_codigo_postal', codigo_postal)
        
        # Renderizar la plantilla con los resultados de la búsqueda
        return render(request, 'index.html', {'results': results})
    else:
        return render(request, 'index.html')

# Vista para buscar por asentamiento
def buscar_por_asentamiento(request):
    if request.method == 'POST':
        
        # Si se realiza una solicitud POST, obtener el nombre del asentamiento
        nombre_asentamiento = request.POST.get('nombre_asentamiento')
        
        # Ejecutar el procedimiento almacenado para buscar por asentamiento
        results = execute_stored_procedure('buscar_por_asentamiento', nombre_asentamiento)
        
        # Renderizar la plantilla con los resultados de la búsqueda
        return render(request, 'index.html', {'results': results})
    else:
        return render(request, 'index.html')

# Vista para buscar por municipio
def buscar_por_municipio(request):
    if request.method == 'POST':
        
        # Si se realiza una solicitud POST, obtener el nombre del municipio
        nombre_municipio = request.POST.get('nombre_municipio')
        
        # Ejecutar el procedimiento almacenado para buscar por municipio
        results = execute_stored_procedure('buscar_por_municipio', nombre_municipio)
        
        # Renderizar la plantilla con los resultados de la búsqueda
        return render(request, 'index.html', {'results': results})
    else:
        return render(request, 'index.html')

# Vista para buscar por estado
def buscar_por_estado(request):
    if request.method == 'POST':
        
        # Si se realiza una solicitud POST, obtener el nombre del estado
        nombre_estado = request.POST.get('nombre_estado')
        
        # Ejecutar el procedimiento almacenado para buscar por estado
        results = execute_stored_procedure('buscar_por_estado', nombre_estado)
        
        # Renderizar la plantilla con los resultados de la búsqueda
        return render(request, 'index.html', {'results': results})
    else:
        return render(request, 'index.html')

# Vista para obtener municipios por estado
def get_municipios_by_estado(request):
    
    # Obtener el estado de la solicitud GET
    estado = request.GET.get('estado')
    
    # Filtrar los municipios por estado y obtener la lista de municipios
    municipios = CodigoPostal.objects.filter(d_estado=estado).values_list('D_mnpio', flat=True).distinct()
    municipios_list = list(municipios)
    
    # Devolver la lista de municipios como una respuesta JSON
    return JsonResponse(municipios_list, safe=False)

# Vista para obtener asentamientos por municipio
def get_asentamientos_by_municipio(request):
    
    # Obtener el municipio de la solicitud GET
    municipio = request.GET.get('municipio')
    
    # Filtrar los asentamientos por municipio y obtener la lista de asentamientos
    asentamientos = CodigoPostal.objects.filter(D_mnpio=municipio).values_list('d_asenta', flat=True).distinct()
    asentamientos_list = list(asentamientos)
    
    # Devolver la lista de asentamientos como una respuesta JSON
    return JsonResponse(asentamientos_list, safe=False)

# Vista para buscar por estado, municipio y asentamiento
def buscar_por_estado_municipio_asentamiento(request):
    if request.method == 'POST':
        
        # Si se realiza una solicitud POST, obtener el estado y municipio
        estado = request.POST.get('nombre_estado')
        municipio = request.POST.get('nombre_municipio')
        
        # Filtrar los asentamientos por estado y municipio, obtener la lista de asentamientos
        asentamientos = CodigoPostal.objects.filter(d_estado=estado, D_mnpio=municipio).values_list('d_asenta', flat=True).distinct()
        asentamientos_list = list(asentamientos)
        
        # Devolver la lista de asentamientos como una respuesta JSON
        return JsonResponse(asentamientos_list, safe=False)
    else:
        
        # Si no se realiza una solicitud POST, devolver una lista vacía como respuesta JSON
        return JsonResponse([], safe=False)

URLS:
"""
URL configuration for proyectofinal project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.urls import path
from . import views
from .views import buscar_por_estado_municipio_asentamiento

# Definición de las URL para las vistas de la aplicación

urlpatterns = [
    # URL para la página de inicio
    path('', views.index, name='index'),
    # URL para buscar por código postal
    path('buscar_por_codigo_postal/', views.buscar_por_codigo_postal, name='buscar_por_codigo_postal'),
    # URL para buscar por asentamiento
    path('buscar_por_asentamiento/', views.buscar_por_asentamiento, name='buscar_por_asentamiento'),
    # URL para buscar por municipio
    path('buscar_por_municipio/', views.buscar_por_municipio, name='buscar_por_municipio'),
    # URL para buscar por estado
    path('buscar_por_estado/', views.buscar_por_estado, name='buscar_por_estado'),
    # URL para obtener municipios por estado
    path('get_municipios_by_estado/', views.get_municipios_by_estado, name='get_municipios_by_estado'),
    # URL para obtener asentamientos por municipio
    path('get_asentamientos_by_municipio/', views.get_asentamientos_by_municipio, name='get_asentamientos_by_municipio'),
    # URL para buscar por estado, municipio y asentamiento
    path('buscar_por_estado_municipio_asentamiento/', views.buscar_por_estado_municipio_asentamiento, name='buscar_por_estado_municipio_asentamiento'),
]

SETTINGS:
"""
Django settings for proyectofinal project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*7dzs(0+i)9-0k7n$d223^^9o9!%b-jl%nbmgqs!(&5&d8c#1)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'proyectofinal',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'proyectofinal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'proyectofinal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'codigopostal',
        'USER': 'root',
        'PASSWORD':'root',
        'HOST':'localhost',
        'PORT':3306,
        'OPTIONS':{
            'init_command':"SET sql_mode = 'STRICT_TRANS_TABLES'"
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MODELS:
from django.db import models

class CodigoPostal(models.Model):
    # Modelo para la tabla de códigos postales

    id_cp = models.IntegerField(primary_key=True)
    d_codigo = models.CharField(max_length=255)
    d_asenta = models.CharField(max_length=255)
    d_tipo_asenta = models.CharField(max_length=50)
    D_mnpio = models.CharField(max_length=255)
    d_estado = models.CharField(max_length=255)
    d_ciudad = models.CharField(max_length=255)
    d_CP = models.IntegerField()
    c_estado = models.IntegerField()
    c_oficina = models.CharField(max_length=255)
    c_CP = models.CharField(max_length=255)
    c_tipo_asenta = models.IntegerField()
    c_mnpio = models.IntegerField()
    id_asenta_cpcons = models.IntegerField()
    d_zona = models.CharField(max_length=50)
    c_cve_ciudad = models.CharField(max_length=50)

    # Método para representar el objeto como una cadena
    def __str__(self):
        return f"Código Postal: {self.d_codigo}, Asentamiento: {self.d_asenta}, Municipio: {self.D_mnpio}, Estado: {self.d_estado}"

    class Meta:
        # Especifica el nombre de la tabla en la base de datos
        db_table = 'codigopostal'

INDEX:
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Búsqueda de Códigos Postales</title>
    <!-- Se carga la hoja de estilos Bootstrap -->
    <link href="{% static 'bootstrap.min.css' %}" rel="stylesheet">
</head>
<body>
    <h1>Búsqueda de Códigos Postales</h1>

    <form action="" method="post">
        {% csrf_token %}
        <label for="nombre_estado">Estado:</label>
        <select name="nombre_estado" id="nombre_estado" class="form-control">
            {% for estado in estados %}
                <!-- Se generan las opciones para seleccionar el estado -->
                <option value="{{ estado }}">{{ estado }}</option>
            {% endfor %}
        </select>
        
        <label for="nombre_municipio">Municipio:</label>
        <select name="nombre_municipio" id="nombre_municipio" class="form-control">
            <!-- Opciones de municipio se agregarán dinámicamente mediante JavaScript -->
        </select>
        
        <label for="nombre_asentamiento">Asentamiento:</label>
        <select name="nombre_asentamiento" id="nombre_asentamiento" class="form-control">
            <!-- Opciones de asentamiento se agregarán dinámicamente mediante JavaScript -->
        </select>
        
        <button type="submit" class="btn btn-primary">Buscar</button>
    </form>

    <!-- Sección para mostrar los resultados de la búsqueda -->
    {% if results %}
    <h2>Resultados:</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Código Postal</th>
                <th>Asentamiento</th>
                <th>Tipo de asentamiento</th>
                <th>Municipio</th>
                <th>Estado</th>
                <th>Ciudad</th>
                <th>Detalle CP</th>
                <th>Codigo de Estado</th>
                <th>Codigo de oficina</th>
                <th>Codigo CP</th>
                <th>Codigo Tipo de asentamiento</th>
                <th>Codigo Municipio</th>
                <th>id Asentamiento</th>
                <th>Zona</th>
                <th>Clave de la Ciudad</th>
            </tr>
        </thead>
        <tbody>
            {% for result in results %}
                <tr>
                    <!-- Se muestran los resultados obtenidos -->
                    <td>{{ result.1 }}</td>
                    <td>{{ result.2 }}</td>
                    <td>{{ result.3 }}</td>
                    <td>{{ result.4 }}</td>
                    <td>{{ result.5 }}</td>
                    <td>{{ result.6 }}</td>
                    <td>{{ result.7 }}</td>
                    <td>{{ result.8 }}</td>
                    <td>{{ result.9 }}</td>
                    <td>{{ result.10 }}</td>
                    <td>{{ result.11 }}</td>
                    <td>{{ result.12 }}</td>
                    <td>{{ result.13 }}</td>
                    <td>{{ result.14 }}</td>
                    <td>{{ result.15 }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
    {% endif %}

    <!-- Se incluyen los scripts JavaScript de jQuery y Bootstrap -->
    <script src="{% static 'jquery-3.5.1.js' %}"></script>
    <script src="{% static 'bootstrap.bundle.min.js' %}"></script>
    
    <script>
        // Script para realizar solicitudes AJAX y actualizar los select de municipio y asentamiento
        $(document).ready(function(){
            $('#nombre_estado').change(function(){
                var selectedEstado = $(this).val();
                // Se realiza una solicitud AJAX para obtener los municipios correspondientes al estado seleccionado
                $.ajax({
                    url: '{% url "get_municipios_by_estado" %}',
                    type: 'GET',
                    data: {
                        estado: selectedEstado
                    },
                    success: function(data){
                        $('#nombre_municipio').empty();
                        // Se agregan las opciones de municipio al select
                        $.each(data, function(index, municipio){
                            $('#nombre_municipio').append('<option value="' + municipio + '">' + municipio + '</option>');
                        });
                    }
                });
            });
    
            $('#nombre_municipio').change(function(){
                var selectedMunicipio = $(this).val();
                var selectedEstado = $('#nombre_estado').val();
                // Se realiza una solicitud AJAX para obtener los asentamientos correspondientes al municipio seleccionado
                $.ajax({
                    url: '{% url "get_asentamientos_by_municipio" %}',
                    type: 'GET',
                    data: {
                        estado: selectedEstado,
                        municipio: selectedMunicipio
                    },
                    success: function(data){
                        $('#nombre_asentamiento').empty();
                        // Se agregan las opciones de asentamiento al select
                        $.each(data, function(index, asentamiento){
                            $('#nombre_asentamiento').append('<option value="' + asentamiento + '">' + asentamiento + '</option>');
                        });
                    }
                });
            });
        });
    </script>
    
</body>
</html>
